import { getRange } from './shadow-dom-selection.helper';
export const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent) ||
    /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
export class SelectionHelper {
    get(container) {
        if (!container) {
            document.getSelection().removeAllRanges();
            return null;
        }
        const canvas = document.querySelector('pe-editor-canvas');
        const range = getRange(canvas.shadowRoot);
        if (!range) {
            return null;
        }
        const preSelectionRange = range.cloneRange();
        preSelectionRange.selectNodeContents(container);
        preSelectionRange.setEnd(range.startContainer, range.startOffset);
        const start = preSelectionRange.toString().length;
        return {
            start,
            end: start + range.toString().length,
            range,
            container,
            parentElement: range.endContainer.parentElement,
        };
    }
    restore(savedSelection) {
        if (!savedSelection) {
            return;
        }
        const doc = savedSelection.container.ownerDocument;
        const win = doc.defaultView;
        const range = doc.createRange();
        range.setStart(savedSelection.container, 0);
        range.collapse(true);
        const nodeStack = [savedSelection.container];
        let node;
        let foundStart = false;
        let stop = false;
        let charIndex = 0;
        while (!stop && (node = nodeStack.pop())) {
            if (node.nodeType == 3) {
                const nextCharIndex = charIndex + node.length;
                if (!foundStart &&
                    savedSelection.start >= charIndex &&
                    savedSelection.start <= nextCharIndex) {
                    range.setStart(node, savedSelection.start - charIndex);
                    foundStart = true;
                }
                if (foundStart &&
                    savedSelection.end >= charIndex &&
                    savedSelection.end <= nextCharIndex) {
                    range.setEnd(node, savedSelection.end - charIndex);
                    stop = true;
                }
                charIndex = nextCharIndex;
            }
            else {
                let i = node.childNodes.length;
                while (i--) {
                    nodeStack.push(node.childNodes[i]);
                }
            }
        }
        const selection = win.getSelection();
        selection.removeAllRanges();
        selection.addRange(range);
    }
    findParentTag(selection, tagName, className, searchDepth = 10) {
        let parentTag = null;
        if (!selection || !selection.anchorNode || !selection.focusNode) {
            return null;
        }
        const boundNodes = [
            selection.anchorNode,
            selection.focusNode,
        ];
        boundNodes.forEach(parent => {
            let searchDepthIterable = searchDepth;
            while (searchDepthIterable > 0 && parent.parentNode) {
                if (!tagName || parent.tagName === tagName) {
                    parentTag = parent;
                    if (className &&
                        parent.classList &&
                        !parent.classList.contains(className)) {
                        parentTag = null;
                    }
                    if (parentTag) {
                        break;
                    }
                }
                parent = parent.parentNode;
                searchDepthIterable--;
            }
        });
        return parentTag;
    }
}
//# sourceMappingURL=data:application/json;base64,