import { Observable, Subject } from 'rxjs';
import { TextEditorComponent } from '../components/text-editor.component';
import { EditorSelection } from '../text-editor.interface';
import { TextEditorSelection } from './selection.service';
import { BoldTransform } from './transforms/bold.transform';
import { ColorTransform } from './transforms/color.transform';
import { ExternalLinkTransform } from './transforms/external-link.transform';
import { FontFamilyTransform } from './transforms/font-family.transform';
import { FontSizeTransform } from './transforms/font-size.transform';
import { ItalicTransform } from './transforms/italic.transform';
import { JustifyCenterTransform } from './transforms/justify-center.transform';
import { JustifyFullTransform } from './transforms/justify-full.transform';
import { JustifyLeftTransform } from './transforms/justify-left.transform';
import { JustifyRightTransform } from './transforms/justify-right.transform';
import { LinkTransform } from './transforms/link.transform';
import { OrderedTransform } from './transforms/ordered.transform';
import { UnderlineTransform } from './transforms/underline.transform';
import { UnorderedTransform } from './transforms/unordered.transform';
import * as i0 from "@angular/core";
export declare class StateService {
    private selection;
    private boldTransform;
    private colorTransform;
    private fontFamilyTransform;
    private fontSizeTransform;
    private italicTransform;
    private linkTransform;
    private externalLinkTransform;
    private underlineTransform;
    private justifyLeftTransform;
    private justifyRightTransform;
    private justifyCenterTransform;
    private justifyFullTransform;
    private unorderedTransform;
    private orderedTransform;
    textEditorComponent: TextEditorComponent;
    lastContentEdited: string;
    private readonly stateSubject$;
    readonly removeListAlignSubject$: Subject<string>;
    private readonly transformationCompletedSubject$;
    transformationCompleted$: Observable<null>;
    changed$: Observable<any>;
    bold$: Observable<boolean>;
    color$: Observable<string>;
    fontSize$: Observable<number>;
    fontFamily$: Observable<string>;
    italic$: Observable<boolean>;
    link$: Observable<string>;
    externalLink$: Observable<string>;
    justifyCenter$: Observable<boolean>;
    justifyLeft$: Observable<boolean>;
    justifyRight$: Observable<boolean>;
    justifyFull$: Observable<boolean>;
    orderedList$: Observable<boolean>;
    underline$: Observable<boolean>;
    unorderedList$: Observable<boolean>;
    value$: Observable<string>;
    constructor(selection: TextEditorSelection, boldTransform: BoldTransform, colorTransform: ColorTransform, fontFamilyTransform: FontFamilyTransform, fontSizeTransform: FontSizeTransform, italicTransform: ItalicTransform, linkTransform: LinkTransform, externalLinkTransform: ExternalLinkTransform, underlineTransform: UnderlineTransform, justifyLeftTransform: JustifyLeftTransform, justifyRightTransform: JustifyRightTransform, justifyCenterTransform: JustifyCenterTransform, justifyFullTransform: JustifyFullTransform, unorderedTransform: UnorderedTransform, orderedTransform: OrderedTransform);
    set value(value: string);
    get value(): string;
    set link(value: string);
    get link(): string;
    set externalLink(value: string);
    get externalLink(): string;
    toggleBold(): void;
    get bold(): boolean;
    toggleItalic(): void;
    get italic(): boolean;
    toggleUnderline(): void;
    get underline(): boolean;
    set fontSize(value: number);
    get fontSize(): number;
    set color(value: string);
    get color(): string;
    set fontFamily(value: string);
    get fontFamily(): string;
    get justifyLeft(): boolean;
    toggleJustifyLeft(): void;
    get justifyRight(): boolean;
    toggleJustifyRight(): void;
    get justifyCenter(): boolean;
    toggleJustifyCenter(): void;
    get justifyFull(): boolean;
    toggleJustifyFull(): void;
    get unorderedList(): boolean;
    toggleUnorderedList(): void;
    get orderedList(): boolean;
    toggleOrderedList(): void;
    saveSelection(selection: EditorSelection): void;
    findParentTag(tag: string): HTMLElement;
    static ɵfac: i0.ɵɵFactoryDef<StateService>;
    static ɵprov: i0.ɵɵInjectableDef<StateService>;
}
