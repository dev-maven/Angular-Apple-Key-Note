var debug = false;
var hasShadow = 'attachShadow' in Element.prototype && 'getRootNode' in Element.prototype;
var hasSelection = !!(hasShadow && document.createElement('div').attachShadow({ mode: 'open' }).getSelection);
var hasShady = window.ShadyDOM && window.ShadyDOM.inUse;
var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent) ||
    /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
var useDocument = !hasShadow || hasShady || (!hasSelection && !isSafari);
var validNodeTypes = [Node.ELEMENT_NODE, Node.TEXT_NODE, Node.DOCUMENT_FRAGMENT_NODE];
function isValidNode(node) {
    return validNodeTypes.includes(node.nodeType);
}
function findNode(s, parentNode, isLeft) {
    var nodes = parentNode.childNodes || parentNode.children;
    if (!nodes) {
        return parentNode; // found it, probably text
    }
    for (var i = 0; i < nodes.length; ++i) {
        var j = isLeft ? i : (nodes.length - 1 - i);
        var childNode = nodes[j];
        if (!isValidNode(childNode)) {
            continue;
        }
        debug && console.debug('checking child', childNode, 'IsLeft', isLeft);
        if (s.containsNode(childNode, true)) {
            if (s.containsNode(childNode, false)) {
                debug && console.info('found child', childNode);
                return childNode;
            }
            debug && console.info('descending child', childNode);
            return findNode(s, childNode, isLeft);
        }
        debug && console.info(parentNode, 'does NOT contain', childNode);
    }
    return parentNode;
}
var addInternalListener = (function () {
    if (hasSelection || useDocument) {
        // getSelection exists or document API can be used
        document.addEventListener('selectionchange', function (ev) {
            document.dispatchEvent(new CustomEvent('-shadow-selectionchange'));
        });
        return function () { };
    }
    var withinInternals = false;
    var handlers = [];
    document.addEventListener('selectionchange', function (ev) {
        if (withinInternals) {
            return;
        }
        document.dispatchEvent(new CustomEvent('-shadow-selectionchange'));
        withinInternals = true;
        window.setTimeout(function () {
            withinInternals = false;
        }, 0);
        handlers.forEach(function (fn) { return fn(ev); });
    });
    return function (fn) { return handlers.push(fn); };
})();
var wasCaret = false;
var resolveTask = null;
addInternalListener(function (ev) {
    var s = window.getSelection();
    if (s.type === 'Caret') {
        wasCaret = true;
    }
    else if (wasCaret && !resolveTask) {
        resolveTask = Promise.resolve(true).then(function () {
            wasCaret = false;
            resolveTask = null;
        });
    }
});
function containsNextElement(s, node, walkForward) {
    var start = node;
    while (node = walkFromNode(node, walkForward)) {
        // walking (left) can contain our own parent, which we don't want
        if (!node.contains(start)) {
            break;
        }
    }
    if (!node) {
        return false;
    }
    // we look for Element as .containsNode says true for _every_ text node, and we only care about
    // elements themselves
    return node instanceof Element && s.containsNode(node, true);
}
function getSelectionDirection(s, leftNode, rightNode) {
    if (s.type !== 'Range') {
        return undefined; // no direction
    }
    var measure = function () { return s.toString().length; };
    var initialSize = measure();
    debug && console.info("initial selection: \"" + s.toString() + "\"");
    if (initialSize === 1 && wasCaret && leftNode === rightNode) {
        // nb. We need to reset a single selection as Safari _always_ tells us the cursor was dragged
        // left to right (maybe RTL on those devices).
        // To be fair, Chrome has the same bug.
        debug && console.debug('resetting size=1');
        s.extend(leftNode, 0);
        s.collapseToEnd();
        return undefined;
    }
    var updatedSize;
    // Try extending forward and seeing what happens.
    s.modify('extend', 'forward', 'character');
    updatedSize = measure();
    debug && console.info("forward selection: \"" + s.toString() + "\"");
    if (updatedSize > initialSize || containsNextElement(s, rightNode, true)) {
        debug && console.info('got forward >, moving right');
        s.modify('extend', 'backward', 'character');
        return true;
    }
    else if (updatedSize < initialSize || !s.containsNode(leftNode)) {
        debug && console.info('got forward <, moving left');
        s.modify('extend', 'backward', 'character');
        return false;
    }
    // Maybe we were at the end of something. Extend backwards.
    // TODO(samthor): We seem to be able to get away without the 'backwards' case.
    s.modify('extend', 'backward', 'character');
    updatedSize = measure();
    debug && console.info("backward selection: \"" + s.toString() + "\"");
    if (updatedSize > initialSize || containsNextElement(s, leftNode, false)) {
        debug && console.info('got backwards >, moving left');
        s.modify('extend', 'forward', 'character');
        return false;
    }
    else if (updatedSize < initialSize || !s.containsNode(rightNode)) {
        debug && console.info('got backwards <, moving right');
        s.modify('extend', 'forward', 'character');
        return true;
    }
    // This is likely a select-all.
    return undefined;
}
function walkFromNode(node, walkForward) {
    if (!walkForward) {
        return node.previousSibling || node.parentNode || null;
    }
    while (node) {
        if (node.nextSibling) {
            return node.nextSibling;
        }
        node = node.parentNode;
    }
    return null;
}
function walkTextFromNode(node, isLeft, s) {
    for (; node; node = walkFromNode(node, isLeft)) {
        if (node.nodeType !== Node.TEXT_NODE) {
            continue;
        }
        var t = node.textContent;
        if (isLeft) {
            if (s.length < t.length) {
                return { node: node, offset: s.length };
            }
            var prefix = s.substr(0, t.length);
            if (prefix !== t) {
                console.debug('unexpected string prefix', prefix, 'expected', t);
            }
            s = s.substr(t.length);
        }
        else {
            if (s.length < t.length) {
                return { node: node, offset: t.length - s.length };
            }
            var suffix = s.substr(s.length - t.length);
            if (suffix !== t) {
                console.debug('unexpected string suffix', suffix, 'expected', t);
            }
            s = s.substr(0, s.length - t.length);
        }
    }
    return null; // too far
}
function initialSpace(node) {
    if (node.nodeType !== Node.TEXT_NODE) {
        return 0;
    }
    return /^\s*/.exec(node.textContent)[0].length;
}
function ignoredTrailingSpace(node) {
    if (node.nodeType !== Node.TEXT_NODE) {
        return 0;
    }
    var trailingSpaceCount = /\s*$/.exec(node.textContent)[0].length;
    if (!trailingSpaceCount) {
        return 0;
    }
    return trailingSpaceCount - 1; // always allow single last
}
var cachedRange = new Map();
export function getRange(root) {
    if (hasSelection || useDocument) {
        var s = (useDocument ? document : root).getSelection();
        return s.rangeCount ? s.getRangeAt(0) : null;
    }
    var thisFrame = cachedRange.get(root);
    if (thisFrame) {
        return thisFrame;
    }
    var initialText = window.getSelection().toString();
    var result = internalGetShadowSelection(root);
    var rs = result.range && result.range.toString() || null;
    if (rs !== null && rs !== initialText) {
        // TODO: sometimes triggers on single-char hack etc
        if (rs.replace(/\s/g, '') !== initialText.replace(/\s/g, '')) {
            // nb. selection eats initial/ending space, range does not: if whitespace is the only
            // difference, then ignore
            console.warn('invalid range, initial text:', initialText);
            console.warn('vs', rs, result.mode, result.range);
        }
    }
    cachedRange.set(root, result.range);
    window.setTimeout(function () {
        cachedRange.delete(root);
    }, 0);
    debug && console.debug('getRange got', result);
    return result.range;
}
var fakeSelectionNode = document.createTextNode('');
export function internalGetShadowSelection(root) {
    var range = document.createRange();
    var s = window.getSelection();
    // if (!s.containsNode(root.host, true)) {
    //   return {range: null, mode: 'none'};
    // }
    // TODO: inserting fake nodes isn't ideal, but containsNode doesn't work on nearby adjacent
    // text nodes (in fact it returns true for all text nodes on the page?!).
    // insert a fake 'before' node to see if it's selected
    root.insertBefore(fakeSelectionNode, root.childNodes[0]);
    var includesBeforeRoot = s.containsNode(fakeSelectionNode);
    fakeSelectionNode.remove();
    if (includesBeforeRoot) {
        return { range: null, mode: 'outside-before' };
    }
    // insert a fake 'after' node to see if it's selected
    root.appendChild(fakeSelectionNode);
    var includesAfterRoot = s.containsNode(fakeSelectionNode);
    fakeSelectionNode.remove();
    if (includesAfterRoot) {
        return { range: null, mode: 'outside-after' };
    }
    var measure = function () { return s.toString().length; };
    var initialSelectionContent = s.toString();
    if (!(s.type === 'Caret' || s.type === 'Range')) {
        return { range: null, mode: 'outside-after' };
    }
    var initialCaret = (s.type === 'Caret');
    var leftNode = findNode(s, root, true);
    var rightNode;
    var isNaturalDirection = undefined;
    if (s.type === 'Range') {
        rightNode = findNode(s, root, false); // get right node here _before_ getSelectionDirection
        isNaturalDirection = getSelectionDirection(s, leftNode, rightNode);
        // isNaturalDirection means "going right"
    }
    if (s.type === 'Caret') {
        // we might transition to being a caret, so don't check initial value
        s.extend(leftNode, 0);
        var at = measure();
        s.collapseToEnd();
        range.setStart(leftNode, at);
        range.setEnd(leftNode, at);
        return { range: range, mode: 'caret' };
    }
    else if (isNaturalDirection === undefined) {
        if (s.type !== 'Range') {
            throw new TypeError('unexpected type: ' + s.type);
        }
        // This occurs when we can't move because we can't extend left or right to measure the
        // direction we're moving in. Good news though: we don't need to _change_ the selection
        // to measure it, so just return immediately.
        range.setStart(leftNode, 0);
        range.setEnd(rightNode, rightNode.length);
        return { range: range, mode: 'all' };
    }
    var size = measure();
    var offsetLeft, offsetRight;
    // only one newline/space char is cared about
    var validRightLength = rightNode.length - ignoredTrailingSpace(rightNode);
    if (isNaturalDirection) {
        // walk in the opposite direction first
        s.extend(leftNode, 0);
        offsetLeft = measure() + initialSpace(leftNode); // measure doesn't include initial space
        // then in our actual direction
        s.extend(rightNode, validRightLength);
        offsetRight = validRightLength - (measure() - size);
        // then revert to the original position
        s.extend(rightNode, offsetRight);
    }
    else {
        // walk in the opposite direction first
        s.extend(rightNode, validRightLength);
        offsetRight = validRightLength - measure();
        // then in our actual direction
        s.extend(leftNode, 0);
        offsetLeft = measure() - size + initialSpace(leftNode); // doesn't include initial space
        // then revert to the original position
        s.extend(leftNode, offsetLeft);
    }
    if (debug) {
        if (leftNode === rightNode) {
            console.info('got string', leftNode.textContent.substr(offsetLeft, offsetRight - offsetLeft));
        }
        else {
            console.info('>>> string', leftNode.textContent.substr(offsetLeft));
            console.info('<<< string', rightNode.textContent.substr(0, offsetRight));
        }
    }
    range.setStart(leftNode, offsetLeft);
    range.setEnd(rightNode, offsetRight);
    return {
        mode: isNaturalDirection ? 'right' : 'left',
        range: range,
    };
}
//# sourceMappingURL=data:application/json;base64,