import { __assign, __rest } from "tslib";
import { isArray, isFunction, merge } from 'lodash-es';
export function pebMapElementDeep(element, handler) {
    var _a = handler(element), _b = _a.children, children = _b === void 0 ? [] : _b, elementProps = __rest(_a, ["children"]);
    return __assign(__assign({}, merge({}, elementProps)), { children: children.map(function (child) { return pebMapElementDeep(child, handler); }) });
}
export function pebFilterElementDeep(element, handler) {
    var _a, _b;
    var nextChildren = (_a = element.children) === null || _a === void 0 ? void 0 : _a.filter(handler);
    return __assign(__assign({}, merge({}, element)), { children: (_b = nextChildren) === null || _b === void 0 ? void 0 : _b.map(function (child) { return pebFilterElementDeep(child, handler); }) });
}
export function pebTraverseElementDeep(element, handler) {
    handler(merge({}, element));
    if (isArray(element.children)) {
        element.children.forEach(function (el) { return pebTraverseElementDeep(el, handler); });
    }
}
export function pebFindElementParents(document, id) {
    var stack = [{ node: document, i: 0 }];
    while (stack.length) {
        var current = stack[stack.length - 1];
        while (current.i < current.node.children.length) {
            var node = current.node.children[current.i];
            if (node.id === id) {
                return stack
                    .filter(function (el) { return el.node.id !== document.id; })
                    .map(function (el) { return el.node; });
            }
            stack.push({ node: node, i: 0 });
            current.i++;
            current = stack[stack.length - 1];
        }
        stack.pop();
    }
    return null;
}
export function pebFindElementChildren(element, predicate) {
    if (predicate && !isFunction(predicate)) {
        throw new Error('Unsupported selector');
    }
    predicate = predicate || (function () { return true; }); // tslint:disable-line
    var result = [];
    pebTraverseElementDeep(element, function (el) {
        if (predicate(el)) {
            result.push(el);
        }
    });
    return result;
}
export function pebTraverseElementDeepWithParent(element, handler, parentId, priority) {
    if (parentId === void 0) { parentId = null; }
    if (priority === void 0) { priority = -1; }
    var nextPriority = parseInt(priority, 10) + 1;
    handler(__assign(__assign({}, element), { parentId: parentId, priority: nextPriority }));
    if (isArray(element.children)) {
        element.children.forEach(function (el) { return pebTraverseElementDeepWithParent(el, handler, element.id, nextPriority); });
    }
}
export function pebFindElementChildrenWithParent(element, predicate) {
    if (predicate === void 0) { predicate = (function () { return true; }); }
    if (predicate && !isFunction(predicate)) {
        throw new Error('Unsupported selector');
    }
    var result = [];
    pebTraverseElementDeepWithParent(element, function (el) {
        if (predicate(el)) {
            result.push(el);
        }
    });
    return result;
}
//# sourceMappingURL=data:application/json;base64,