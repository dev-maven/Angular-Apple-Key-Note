var _a;
import { __assign, __read, __spread } from "tslib";
import { PebTemplateEffect } from '../../models/action';
import { pebFilterElementDeep, pebMapElementDeep } from '../../utils/element-utils';
export var layoutsScopeName = 'layouts';
export var pebLayoutEffectHandlers = (_a = {},
    _a[PebTemplateEffect.Init] = pebLayoutInitHandler,
    _a[PebTemplateEffect.Destroy] = pebLayoutDestroyHandler,
    _a[PebTemplateEffect.AppendElement] = pebLayoutAppendElementHandler,
    _a[PebTemplateEffect.UpdateElement] = pebLayoutUpdateElementHandler,
    _a[PebTemplateEffect.RelocateElement] = pebLayoutRelocateElementHandler,
    _a[PebTemplateEffect.DeleteElement] = pebLayoutDeleteElementHandler,
    _a);
export function pebLayoutInitHandler(prevLayout, payload) {
    return payload;
}
export function pebLayoutDestroyHandler(prevLayout) {
    return null;
}
export function pebLayoutAppendElementHandler(prevLayout, payload) {
    return pebMapElementDeep(prevLayout, function (el) { return (el.id === payload.to ? __assign(__assign({}, el), { children: __spread(el.children, [payload.element]) }) : el); });
}
export function pebLayoutUpdateElementHandler(prevLayout, payload) {
    throw new Error('To implement');
    return prevLayout;
}
export function pebLayoutRelocateElementHandler(prevLayout, payload) {
    throw new Error('To implement');
    return prevLayout;
}
export function pebLayoutDeleteElementHandler(prevLayout, payload) {
    return pebFilterElementDeep(prevLayout, function (c) { return c.id !== payload; });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuZWZmZWN0cy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BwZS9idWlsZGVyLWNvcmUvIiwic291cmNlcyI6WyJhY3Rpb25zL2VmZmVjdHMvdGVtcGxhdGUuZWZmZWN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBR3hELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRXBGLE1BQU0sQ0FBQyxJQUFNLGdCQUFnQixHQUFHLFNBQVMsQ0FBQztBQVExQyxNQUFNLENBQUMsSUFBTSx1QkFBdUI7SUFHbEMsR0FBQyxpQkFBaUIsQ0FBQyxJQUFJLElBQUcsb0JBQW9CO0lBQzlDLEdBQUMsaUJBQWlCLENBQUMsT0FBTyxJQUFHLHVCQUF1QjtJQUNwRCxHQUFDLGlCQUFpQixDQUFDLGFBQWEsSUFBRyw2QkFBNkI7SUFDaEUsR0FBQyxpQkFBaUIsQ0FBQyxhQUFhLElBQUcsNkJBQTZCO0lBQ2hFLEdBQUMsaUJBQWlCLENBQUMsZUFBZSxJQUFHLCtCQUErQjtJQUNwRSxHQUFDLGlCQUFpQixDQUFDLGFBQWEsSUFBRyw2QkFBNkI7T0FDakUsQ0FBQztBQUVGLE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxVQUFnQixFQUFFLE9BQW9CO0lBQ3pFLE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxNQUFNLFVBQVUsdUJBQXVCLENBQUMsVUFBOEI7SUFDcEUsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsTUFBTSxVQUFVLDZCQUE2QixDQUFDLFVBQXVCLEVBQUUsT0FBZ0M7SUFDckcsT0FBTyxpQkFBaUIsQ0FDdEIsVUFBVSxFQUNWLFVBQUEsRUFBRSxJQUFJLE9BQUEsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyx1QkFBTSxFQUFFLEtBQUUsUUFBUSxXQUFNLEVBQUUsQ0FBQyxRQUFRLEdBQUUsT0FBTyxDQUFDLE9BQU8sTUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQXBGLENBQW9GLENBQzVFLENBQUM7QUFDbkIsQ0FBQztBQUVELE1BQU0sVUFBVSw2QkFBNkIsQ0FBQyxVQUF1QixFQUFFLE9BQVk7SUFDakYsTUFBTSxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNoQyxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDO0FBRUQsTUFBTSxVQUFVLCtCQUErQixDQUFDLFVBQXVCLEVBQUUsT0FBWTtJQUNuRixNQUFNLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2hDLE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUM7QUFFRCxNQUFNLFVBQVUsNkJBQTZCLENBQUMsVUFBdUIsRUFBRSxPQUFlO0lBQ3BGLE9BQU8sb0JBQW9CLENBQUMsVUFBVSxFQUFFLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLEVBQUUsS0FBSyxPQUFPLEVBQWhCLENBQWdCLENBQWdCLENBQUM7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBlYlRlbXBsYXRlRWZmZWN0IH0gZnJvbSAnLi4vLi4vbW9kZWxzL2FjdGlvbic7XG5pbXBvcnQgeyBQZWJUZW1wbGF0ZSB9IGZyb20gJy4uLy4uL21vZGVscy9jbGllbnQnO1xuaW1wb3J0IHsgUGViRWxlbWVudCB9IGZyb20gJy4uLy4uL21vZGVscy9lbGVtZW50JztcbmltcG9ydCB7IHBlYkZpbHRlckVsZW1lbnREZWVwLCBwZWJNYXBFbGVtZW50RGVlcCB9IGZyb20gJy4uLy4uL3V0aWxzL2VsZW1lbnQtdXRpbHMnO1xuXG5leHBvcnQgY29uc3QgbGF5b3V0c1Njb3BlTmFtZSA9ICdsYXlvdXRzJztcblxuZXhwb3J0IGludGVyZmFjZSBQZWJBcHBlbmRFbGVtZW50UGF5bG9hZCB7XG4gIHRvOiBzdHJpbmc7XG4gIGFmdGVyPzogc3RyaW5nO1xuICBlbGVtZW50OiBQZWJFbGVtZW50O1xufVxuXG5leHBvcnQgY29uc3QgcGViTGF5b3V0RWZmZWN0SGFuZGxlcnM6IHtcbiAgW2VmZmVjdE5hbWUgaW4gUGViVGVtcGxhdGVFZmZlY3RdOiAocHJldkxheW91dDogbnVsbHwgUGViVGVtcGxhdGUsIHBheWxvYWQ6IGFueSkgPT4gUGViVGVtcGxhdGUgfCBudWxsXG59ID0ge1xuICBbUGViVGVtcGxhdGVFZmZlY3QuSW5pdF06IHBlYkxheW91dEluaXRIYW5kbGVyLFxuICBbUGViVGVtcGxhdGVFZmZlY3QuRGVzdHJveV06IHBlYkxheW91dERlc3Ryb3lIYW5kbGVyLFxuICBbUGViVGVtcGxhdGVFZmZlY3QuQXBwZW5kRWxlbWVudF06IHBlYkxheW91dEFwcGVuZEVsZW1lbnRIYW5kbGVyLFxuICBbUGViVGVtcGxhdGVFZmZlY3QuVXBkYXRlRWxlbWVudF06IHBlYkxheW91dFVwZGF0ZUVsZW1lbnRIYW5kbGVyLFxuICBbUGViVGVtcGxhdGVFZmZlY3QuUmVsb2NhdGVFbGVtZW50XTogcGViTGF5b3V0UmVsb2NhdGVFbGVtZW50SGFuZGxlcixcbiAgW1BlYlRlbXBsYXRlRWZmZWN0LkRlbGV0ZUVsZW1lbnRdOiBwZWJMYXlvdXREZWxldGVFbGVtZW50SGFuZGxlcixcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBwZWJMYXlvdXRJbml0SGFuZGxlcihwcmV2TGF5b3V0OiBudWxsLCBwYXlsb2FkOiBQZWJUZW1wbGF0ZSkge1xuICByZXR1cm4gcGF5bG9hZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBlYkxheW91dERlc3Ryb3lIYW5kbGVyKHByZXZMYXlvdXQ6IG51bGwgfCBQZWJUZW1wbGF0ZSkge1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBlYkxheW91dEFwcGVuZEVsZW1lbnRIYW5kbGVyKHByZXZMYXlvdXQ6IFBlYlRlbXBsYXRlLCBwYXlsb2FkOiBQZWJBcHBlbmRFbGVtZW50UGF5bG9hZCk6IFBlYlRlbXBsYXRlIHtcbiAgcmV0dXJuIHBlYk1hcEVsZW1lbnREZWVwKFxuICAgIHByZXZMYXlvdXQsXG4gICAgZWwgPT4gKGVsLmlkID09PSBwYXlsb2FkLnRvID8geyAuLi5lbCwgY2hpbGRyZW46IFsuLi5lbC5jaGlsZHJlbiwgcGF5bG9hZC5lbGVtZW50XSB9IDogZWwpLFxuICApIGFzIFBlYlRlbXBsYXRlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGViTGF5b3V0VXBkYXRlRWxlbWVudEhhbmRsZXIocHJldkxheW91dDogUGViVGVtcGxhdGUsIHBheWxvYWQ6IGFueSkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ1RvIGltcGxlbWVudCcpO1xuICByZXR1cm4gcHJldkxheW91dDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBlYkxheW91dFJlbG9jYXRlRWxlbWVudEhhbmRsZXIocHJldkxheW91dDogUGViVGVtcGxhdGUsIHBheWxvYWQ6IGFueSkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ1RvIGltcGxlbWVudCcpO1xuICByZXR1cm4gcHJldkxheW91dDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBlYkxheW91dERlbGV0ZUVsZW1lbnRIYW5kbGVyKHByZXZMYXlvdXQ6IFBlYlRlbXBsYXRlLCBwYXlsb2FkOiBzdHJpbmcpOiBQZWJUZW1wbGF0ZSB7XG4gIHJldHVybiBwZWJGaWx0ZXJFbGVtZW50RGVlcChwcmV2TGF5b3V0LCBjID0+IGMuaWQgIT09IHBheWxvYWQpIGFzIFBlYlRlbXBsYXRlO1xufVxuIl19