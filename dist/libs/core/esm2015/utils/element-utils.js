import { __rest } from "tslib";
import { isArray, isFunction, merge } from 'lodash-es';
export function pebMapElementDeep(element, handler) {
    const _a = handler(element), { children: children = [] } = _a, elementProps = __rest(_a, ["children"]);
    return Object.assign(Object.assign({}, merge({}, elementProps)), { children: children.map(child => pebMapElementDeep(child, handler)) });
}
export function pebFilterElementDeep(element, handler) {
    var _a, _b;
    const nextChildren = (_a = element.children) === null || _a === void 0 ? void 0 : _a.filter(handler);
    return Object.assign(Object.assign({}, merge({}, element)), { children: (_b = nextChildren) === null || _b === void 0 ? void 0 : _b.map(child => pebFilterElementDeep(child, handler)) });
}
export function pebTraverseElementDeep(element, handler) {
    handler(merge({}, element));
    if (isArray(element.children)) {
        element.children.forEach(el => pebTraverseElementDeep(el, handler));
    }
}
export function pebFindElementParents(document, id) {
    const stack = [{ node: document, i: 0 }];
    while (stack.length) {
        let current = stack[stack.length - 1];
        while (current.i < current.node.children.length) {
            const node = current.node.children[current.i];
            if (node.id === id) {
                return stack
                    .filter(el => el.node.id !== document.id)
                    .map(el => el.node);
            }
            stack.push({ node, i: 0 });
            current.i++;
            current = stack[stack.length - 1];
        }
        stack.pop();
    }
    return null;
}
export function pebFindElementChildren(element, predicate) {
    if (predicate && !isFunction(predicate)) {
        throw new Error('Unsupported selector');
    }
    predicate = predicate || (() => true); // tslint:disable-line
    const result = [];
    pebTraverseElementDeep(element, el => {
        if (predicate(el)) {
            result.push(el);
        }
    });
    return result;
}
export function pebTraverseElementDeepWithParent(element, handler, parentId = null, priority = -1) {
    const nextPriority = parseInt(priority, 10) + 1;
    handler(Object.assign(Object.assign({}, element), { parentId, priority: nextPriority }));
    if (isArray(element.children)) {
        element.children.forEach(el => pebTraverseElementDeepWithParent(el, handler, element.id, nextPriority));
    }
}
export function pebFindElementChildrenWithParent(element, predicate = (() => true)) {
    if (predicate && !isFunction(predicate)) {
        throw new Error('Unsupported selector');
    }
    const result = [];
    pebTraverseElementDeepWithParent(element, el => {
        if (predicate(el)) {
            result.push(el);
        }
    });
    return result;
}
//# sourceMappingURL=data:application/json;base64,